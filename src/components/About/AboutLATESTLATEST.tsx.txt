import { ReactElement, useEffect, useRef } from 'react';
import { View, Linking, StatusBar, Animated, useAnimatedValue, Pressable, ScrollView, AppState, findNodeHandle, StyleSheet } from 'react-native';
import { Text } from '../../utils/Text';
import { s } from './AboutCSS';
import { Ionicons, AntDesign, MaterialCommunityIcons, createIconSetFromFontello } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import FastImage from 'react-native-fast-image';
import { AboutI } from '../../interfaces/interfaces';
import CustomScrollView from '../CustomScrollView/CustomScrollView';

//function About({ navigation: { navigate }, vmin }: AboutI): ReactElement {
const About = ({ navigation, vmin, width, showModal, updateShowModal, state, twoScreens, switchSide, nextScreen, aboutUp, ins, height, hingeBounds, calcLeft }: any): ReactElement => {

  const { navigate } = navigation

  useEffect(() => {
    (navigation.getState().routes.at(-1).name === 'About' && (state === 'tabletop' || state === 'book')) && navigate('Home', { lastRoute: 'About' })
  }, [state])

  const fadeAnim = useAnimatedValue(0);

  const fadeIn = () => Animated.timing(fadeAnim, { toValue: 1, duration: 1000, useNativeDriver: true }).start();
  const fadeOut = () => Animated.timing(fadeAnim, { toValue: 0, duration: 1000, useNativeDriver: true }).start();

  useEffect(() => showModal ? fadeIn() : fadeOut(), [showModal])

  console.log("TEST ABOUT")

  const parsedInsTop = ins.top === 0 ? 1 : ins.top // PREVENT NaN WHEN RENDER (on native side)
  const maxInsetLeftOrRight = ins.left > ins.right ? ins.left * 2 : ins.right * 2
  const parsedWidth =
    state === 'book' && calcLeft ? width - hingeBounds.right - ins.right - maxInsetLeftOrRight :
    state === 'book' && !calcLeft ? hingeBounds.left - ins.left - maxInsetLeftOrRight :
    width - maxInsetLeftOrRight


  const parsedHeight = height === 0 ? 1 : height // PREVENT NaN WHEN RENDER (on native side)
  const topByHeight = ins.top / parsedHeight

  useEffect(() => { // ON LEAVE COMPONENT
    return () => updateShowModal(false)
  }, [])

  // API: Home:      Overview:                        StatusBar:
  // 36   background active                           active
  // 34   background active                           active
  // 31   background active                           active
  // 30   background background                       active
  // 29   background background                       active
  // 28   background background                       active
  // 26   background background                       active
  // 23   active     background (1st) / active (next) active
  useEffect(() => { // ON APP BLUR
    const blur = AppState.addEventListener('blur', () => updateShowModal(false))
    return () => blur.remove()
  }, []);

  //const scrollRef = useRef<ScrollView>(null);
  //useEffect(() => setViewId(findNodeHandle(scrollRef.current)), [])

  // console.log("ins.left", ins.left)
  // console.log("ins.top", ins.top)
  // console.log("ins.right", ins.right)
  // console.log("ins.bottom", ins.bottom)

// const overflowingContent = (
        
//     );

    return (
        <View style={{
          flex: 1,
          backgroundColor: '#f0f0f0',
          // justifyContent: 'center',
          // alignContent: 'center',
          //justifyContent: 'center',
        }}>
          
          <ScrollView
                  style={{
                    //display: 'none',
                    //pointerEvents: 'box-none',
                    //backfaceVisibility: 'hidden',
                    //backgroundColor: 'transparent'
                  }}
                  //persistentScrollbar={true}
                  nestedScrollEnabled={true}
                  //removeClippedSubviews={false}
                  //scrollEnabled={false}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={{
                          //flex: 1,
                          // justifyContent: 'center',
                          // alignItems: 'center', 

                          flexGrow: 1,
                          alignItems: 'center',
                          paddingVertical: 10, // Add a bit of scroll padding
                          //backgroundColor: 'red',
                          // justifyContent: 'center',
                          // alignContent: 'center',
                      }}
          >
            <CustomScrollView
              persistentScrollbar={true}
              //nestedScrollEnabled={true}
              // removeClippedSubviews={false}
              // scrollEnabled={false}
              // showsVerticalScrollIndicator={false}
              scrollbarPadding={{
                    //left: ins.left * 1,
                    //left: -24,
                    //left: 40,
                    left: 0,
                    top: 0,
                    //top: 64,
                    right: 20,
                    //right: 60,
                    //right: 40,
                    //bottom: 48,
                    bottom: 0,
              }}
              
                //style={styles.scrollView}
                //style={{ flex: 1 }}
                style={{
                  flex: 1,
                  flexGrow: 1,
                  /* justifyContent: 'center', */
                  // justifyContent: 'center',
                  // alignContent: 'center',
                  //justifyContent: 'center',
                }}
                contentContainerStyle={{
                    // flexGrow: 1,
                    // justifyContent: 'center',
                    // alignItems: 'center', 

                    // flexGrow: 1,
                    // alignItems: 'center',
                    // paddingVertical: 10, // Add a bit of scroll padding
                    
                    backgroundColor: 'red',
                    // justifyContent: 'center',
                    // alignContent: 'center',
                }}
                //style={styles.scrollView}
                // childLayoutProps={{
                //   // flexGrow: 1, 
                //   // //collapsable: false,
                //   // // ‚ö†Ô∏è NOTICE: We REMOVED justifyContent: 'center' here
                //   // // We can keep alignItems for horizontal centering if needed:
                //   // alignItems: 'center',
                //   // paddingVertical: 10, // Add a bit of scroll padding
                //   // backgroundColor: 'red',
                // }}
                // children={
                // }
            >
              
                <View  collapsable={false}
                  style={{
                      width: '80%',
                      padding: 20,
                      // backgroundColor: 'white',
                      //height: 'auto',
                      borderRadius: 8,
                      //height: 'fit-content',
                      alignItems: 'center',
                      marginTop: 'auto',
                      marginBottom: 'auto',
                      // paddingTop: 30,
                      // paddingBottom: 30,
                      // //height: 'fit-content',
                      // //justifyContent: 'center',
                      //justifyContent: 'center',
                      //
                  }}
                > 
                  {/* The auto margins on this child are the key fix! */}
                  <Text style={styles.text}>--- Top of Content ---</Text>
                  {Array.from({ length: 25 }).map((_, i) => (
                      <Text key={i} style={styles.longText}>Item #{i + 1}</Text>
                  ))}
                  <Text style={styles.text}>--- End of Content ---</Text>
                </View>
             
            </CustomScrollView>
          </ScrollView>
          
        </View>
    );
}

const styles = StyleSheet.create({
    screenContainer: {
        flex: 1,
        //height: '75%',
        backgroundColor: '#f0f0f0',
    },
    contentContainer: {
        flexGrow: 1, 
        // ‚ö†Ô∏è NOTICE: We REMOVED justifyContent: 'center' here
        // We can keep alignItems for horizontal centering if needed:
        alignItems: 'center', 
        paddingVertical: 10, // Add a bit of scroll padding
        backgroundColor: 'red',
    },
    
    // üí° THE FIX IS HERE: The immediate child inside the ScrollView
    content: {
      
        width: '90%',
        //padding: 20,
        backgroundColor: 'white',
        borderRadius: 8,
        
        // Use auto margins for vertical centering instead of parent justifyContent
        marginTop: 'auto',
        marginBottom: 'auto', 
    },
    
    text: {
        fontSize: 18,
        fontWeight: 'bold',
        //marginBottom: 10,
    },
    longText: {
        fontSize: 14,
        //marginVertical: 2,
    }
});

export default About;